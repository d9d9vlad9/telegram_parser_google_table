import datetime
import asyncio
import json
import logging
from .config import CHECK_INTERVAL, COLUMN_ACTIVE, COLUMN_TELEGRAM, MSG_START, MSG_EXECUTION, ZONE
from .employee_notifier import EmployeeNotifier
from .get_active_task import get_active_tasks_for_now
from .sheets_service import SheetsService
from .notifier import Notifier
from .task_processor import TaskProcessor
from zoneinfo import ZoneInfo


logger = logging.getLogger(__name__)


class Scheduler:
    """
    –ö–ª–∞—Å—Å Scheduler —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç,
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π Notifier.

    Attributes:
        notifier (Notifier): –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π.
        sheets (SheetsService): –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü.
        already_notified (set): –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        task_processor (TaskProcessor): –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á.
        employee_notifier (EmployeeNotifier): –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """
    def __init__(self, notifier: Notifier, sheets: SheetsService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Scheduler.

        Args:
            notifier (Notifier): –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
            sheets (SheetsService): –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏.
        """
        self.notifier = notifier
        self.sheets = sheets
        self.already_notified = set()
        self.task_processor = TaskProcessor("date")
        self.employee_notifier = EmployeeNotifier(COLUMN_ACTIVE, COLUMN_TELEGRAM)
        logger.info("Scheduler initialized")

    async def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã Scheduler.

        –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        """
        logger.info("Scheduler started")
        await self.send_welcome_message()

        while True:
            try:
                await self.check_tasks()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ check_tasks: {e}", exc_info=True)
            await asyncio.sleep(CHECK_INTERVAL)

    async def send_welcome_message(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
        """
        now = datetime.datetime.now(ZoneInfo("UTC")).astimezone(ZONE).strftime("%d.%m.%Y %H:%M")
        text = (
            f"ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n"
            f"–°–µ–≥–æ–¥–Ω—è: <b>{now}</b>\n\n"
            f"–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."
        )
        await self.notifier.send_group_message(text)

    async def check_tasks(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á,
        –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.
        """
        data = self.sheets.get_tasks()
        employees = self.sheets.get_employees()

        tasks_now = get_active_tasks_for_now(data)
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n{json.dumps(tasks_now, ensure_ascii=False, indent=2)}")
        active_tasks = self.task_processor.filter_active_tasks(tasks_now)
        if not active_tasks:
            logger.debug("–í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Ç")
            return

        grouped_tasks = self.task_processor.group_tasks(active_tasks)
        mentions = self.employee_notifier.get_mentions(employees)

        for (stage, task_time), tasks in grouped_tasks.items():
            message = self._build_message(stage, task_time, tasks, mentions)
            notify_key = f"{stage}:{task_time}"
            if notify_key in self.already_notified:
                continue

            await self.notifier.send_group_message(message)
            self.already_notified.add(notify_key)

    @staticmethod
    def _build_message(stage: str, task_time: str, tasks: list, mentions: list) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞—á.

        Args:
            stage (str): –°—Ç–∞–¥–∏—è –∑–∞–¥–∞—á–∏ ('start' –∏–ª–∏ 'execution').
            task_time (str): –í—Ä–µ–º—è –∑–∞–¥–∞—á–∏.
            tasks (list): –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–¥–∞—á.
            mentions (list): –°–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

        Returns:
            str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        """
        if stage == "start":
            title = MSG_START.format(task_time=task_time)
        else:
            title = MSG_EXECUTION.format(task_time=task_time)

        task_lines = "\n".join(f"- {t}" for t in tasks)
        return f"{title}{task_lines}\n\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ: {', '.join(mentions)}"

